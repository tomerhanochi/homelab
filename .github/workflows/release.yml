name: Create and publish a Docker image

on:
  push:
    tags:
      - v*
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,format=long
      - name: Build OCI image
        id: build
        shell: bash
        run: |-
          set -euxo pipefail;

          unchunked_image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:unchunked"
          rechunked_image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:rechunked"

          sudo podman build \
            --tag "${unchunked_image}" \
            $(echo -en "${{ steps.meta.outputs.labels }}" | xargs -i echo '--label={}') \
            ./image

          sudo podman run \
            --rm \
            --privileged \
            --security-opt=label=disable \
            --volume /var/lib/containers:/var/lib/containers:z \
            quay.io/fedora/fedora-bootc:latest \
            /usr/libexec/bootc-base-imagectl rechunk "${unchunked_image}" "${rechunked_image}";

          while read tag; do
            sudo podman tag "${rechunked_image}" ${tag}";
          done <<<"$(echo -en "${{ steps.meta.outputs.tags }}")";

          echo "digest=$(podman image inspect "${rechunked_image}" -f '{{ .Digest }}')" >> "${GITHUB_OUTPUT}"
      - name: Push OCI image
        id: push
        uses: redhat-actions/push-to-registry@v2
        with:
          tags: ${{ steps.meta.outputs.tags }}
          username: ${{ github.actor }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true
